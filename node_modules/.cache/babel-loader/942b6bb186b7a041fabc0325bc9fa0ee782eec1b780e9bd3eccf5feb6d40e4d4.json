{"ast":null,"code":"import React,{useState,useEffect}from'react';import Sidebar from'../components/sidebar';import StatCard from'../components/statcard';import UserTable from'../components/UserTable';import'./InactiveUser.css';// CSS file for dashboard styling\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const InactiveUsers=()=>{const[currentView,setCurrentView]=useState('Inactive Users');const[inactiveUsers,setInactiveUsers]=useState([]);const[consultantsCount,setConsultantsCount]=useState(0);const[customersCount,setCustomersCount]=useState(0);const[totalActiveUsers,setTotalActiveUsers]=useState(0);const[inactiveUsersCount,setInactiveUsersCount]=useState(0);useEffect(()=>{const fetchInactiveAccounts=async()=>{try{const response=await fetch('https://bridechila-apis-2.onrender.com/inactiveAccounts');const data=await response.json();const formattedUsers=data.map(user=>({id:user.id,// Ensure id is included\nname:user.name||'N/A',email:user.email,number:user.phoneNumber||'N/A',profession:user.profession||'N/A',status:user.conAccApproved?'Active':'Inactive',role:user.role}));setInactiveUsers(formattedUsers);}catch(error){console.error('Error fetching inactive accounts:',error);}};const fetchTotals=async()=>{try{const responses=await Promise.all([fetch('https://bridechila-apis-2.onrender.com/totalActiveUsers'),fetch('https://bridechila-apis-2.onrender.com/totalInactiveUsers'),fetch('https://bridechila-apis-2.onrender.com/totalConsultants'),fetch('https://bridechila-apis-2.onrender.com/totalCustomers')]);const[activeData,inactiveData,consultantsData,customersData]=await Promise.all(responses.map(response=>response.json()));setTotalActiveUsers(activeData.totalActiveUsers);setInactiveUsersCount(inactiveData.totalInactiveUsers);setConsultantsCount(consultantsData.totalConsultants);setCustomersCount(customersData.totalCustomers);}catch(error){console.error('Error fetching totals:',error);}};fetchInactiveAccounts();fetchTotals();},[currentView]);const handleViewChange=view=>{setCurrentView(view);};const handleActivateUser=async Id=>{try{const response=await fetch(`http://localhost:3000/activate/${Id}`,{method:'PATCH',// Use POST or PUT depending on your API design\nheaders:{'Content-Type':'application/json'}});if(response.ok){alert('User activated successfully!');// Optionally refetch users or update state\nconst updatedUsers=inactiveUsers.filter(user=>user.id!==Id);setInactiveUsers(updatedUsers);// Optionally update totals\n}else{alert('Failed to activate user.');}}catch(error){console.error('Error activating user:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard\",children:[/*#__PURE__*/_jsx(Sidebar,{onMenuClick:handleViewChange}),/*#__PURE__*/_jsxs(\"div\",{className:\"content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-cards\",children:[/*#__PURE__*/_jsx(StatCard,{title:\"Total Active Users\",value:totalActiveUsers}),/*#__PURE__*/_jsx(StatCard,{title:\"Total Inactive Users\",value:inactiveUsersCount}),/*#__PURE__*/_jsx(StatCard,{title:\"Total Consultants\",value:consultantsCount}),/*#__PURE__*/_jsx(StatCard,{title:\"Total Customers\",value:customersCount})]}),/*#__PURE__*/_jsx(UserTable,{users:inactiveUsers,heading:\"All Inactive Users\",buttonLabel:\"Activate\",onButtonClick:handleActivateUser// Pass the callback\n})]})]});};export default InactiveUsers;","map":{"version":3,"names":["React","useState","useEffect","Sidebar","StatCard","UserTable","jsx","_jsx","jsxs","_jsxs","InactiveUsers","currentView","setCurrentView","inactiveUsers","setInactiveUsers","consultantsCount","setConsultantsCount","customersCount","setCustomersCount","totalActiveUsers","setTotalActiveUsers","inactiveUsersCount","setInactiveUsersCount","fetchInactiveAccounts","response","fetch","data","json","formattedUsers","map","user","id","name","email","number","phoneNumber","profession","status","conAccApproved","role","error","console","fetchTotals","responses","Promise","all","activeData","inactiveData","consultantsData","customersData","totalInactiveUsers","totalConsultants","totalCustomers","handleViewChange","view","handleActivateUser","Id","method","headers","ok","alert","updatedUsers","filter","className","children","onMenuClick","title","value","users","heading","buttonLabel","onButtonClick"],"sources":["D:/My tasks/admin-dashboard/src/pages/InactiveUser.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Sidebar from '../components/sidebar';\r\nimport StatCard from '../components/statcard';\r\nimport UserTable from '../components/UserTable';\r\nimport './InactiveUser.css'; // CSS file for dashboard styling\r\n\r\nconst InactiveUsers = () => {\r\n  const [currentView, setCurrentView] = useState('Inactive Users');\r\n  const [inactiveUsers, setInactiveUsers] = useState([]);\r\n  const [consultantsCount, setConsultantsCount] = useState(0);\r\n  const [customersCount, setCustomersCount] = useState(0);\r\n  const [totalActiveUsers, setTotalActiveUsers] = useState(0);\r\n  const [inactiveUsersCount, setInactiveUsersCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchInactiveAccounts = async () => {\r\n      try {\r\n        const response = await fetch('https://bridechila-apis-2.onrender.com/inactiveAccounts');\r\n        const data = await response.json();\r\n        const formattedUsers = data.map(user => ({\r\n          id: user.id, // Ensure id is included\r\n          name: user.name || 'N/A',\r\n          email: user.email,\r\n          number: user.phoneNumber || 'N/A',\r\n          profession: user.profession || 'N/A',\r\n          status: user.conAccApproved ? 'Active' : 'Inactive',\r\n          role: user.role,\r\n        }));\r\n        setInactiveUsers(formattedUsers);\r\n      } catch (error) {\r\n        console.error('Error fetching inactive accounts:', error);\r\n      }\r\n    };\r\n\r\n    const fetchTotals = async () => {\r\n      try {\r\n        const responses = await Promise.all([\r\n          fetch('https://bridechila-apis-2.onrender.com/totalActiveUsers'),\r\n          fetch('https://bridechila-apis-2.onrender.com/totalInactiveUsers'),\r\n          fetch('https://bridechila-apis-2.onrender.com/totalConsultants'),\r\n          fetch('https://bridechila-apis-2.onrender.com/totalCustomers')\r\n        ]);\r\n\r\n        const [activeData, inactiveData, consultantsData, customersData] = await Promise.all(\r\n          responses.map(response => response.json())\r\n        );\r\n\r\n        setTotalActiveUsers(activeData.totalActiveUsers);\r\n        setInactiveUsersCount(inactiveData.totalInactiveUsers);\r\n        setConsultantsCount(consultantsData.totalConsultants);\r\n        setCustomersCount(customersData.totalCustomers);\r\n      } catch (error) {\r\n        console.error('Error fetching totals:', error);\r\n      }\r\n    };\r\n\r\n    fetchInactiveAccounts();\r\n    fetchTotals();\r\n  }, [currentView]);\r\n\r\n  const handleViewChange = (view) => {\r\n    setCurrentView(view);\r\n  };\r\n\r\n  const handleActivateUser = async (Id) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3000/activate/${Id}`, {\r\n        method: 'PATCH', // Use POST or PUT depending on your API design\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('User activated successfully!');\r\n        // Optionally refetch users or update state\r\n        const updatedUsers = inactiveUsers.filter(user => user.id !== Id);\r\n        setInactiveUsers(updatedUsers);\r\n        // Optionally update totals\r\n      } else {\r\n        alert('Failed to activate user.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error activating user:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <Sidebar onMenuClick={handleViewChange} />\r\n      <div className=\"content\">\r\n        <div className=\"stat-cards\">\r\n          <StatCard title=\"Total Active Users\" value={totalActiveUsers} />\r\n          <StatCard title=\"Total Inactive Users\" value={inactiveUsersCount} />\r\n          <StatCard title=\"Total Consultants\" value={consultantsCount} />\r\n          <StatCard title=\"Total Customers\" value={customersCount} />\r\n        </div>\r\n        <UserTable \r\n          users={inactiveUsers} \r\n          heading=\"All Inactive Users\"\r\n          buttonLabel=\"Activate\"\r\n          onButtonClick={handleActivateUser} // Pass the callback\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InactiveUsers;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}